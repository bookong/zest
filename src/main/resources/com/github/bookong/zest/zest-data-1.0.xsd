<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright 2014-2020 the original author or authors.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:data="https://www.bookong.net/schema/zest/data"
            targetNamespace="https://www.bookong.net/schema/zest/data"
            elementFormDefault="qualified" attributeFormDefault="unqualified">

    <xsd:annotation>
        <xsd:documentation>
            For all times represented by strings, the pattern must be "yyyy-MM-dd'T'HH:mm:ss.SSSX" where "X" is ISO 8601 time zone.
            For example, Beijing time "2020-08-09 10:12:00" is represented as "2020-08-09T10:12:00.000+08:00".
        </xsd:documentation>
    </xsd:annotation>

    <xsd:element name="Zest">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="Description" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The description information of the unit test case.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element ref="data:Sources"/>
                <xsd:element ref="data:Param"/>
            </xsd:sequence>
            <xsd:attribute name="Version" type="xsd:float" default="1.0"/>
            <xsd:attribute name="CurrentTime" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>
                        Optional current data source time.
                        If this value is set, all time type content will undergo a conversion during the initialization and automatic verification of the data source.
                        This is done to be able to test the logic related to the current time.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="Sources">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="data:Source" minOccurs="0" maxOccurs="unbounded"/>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="Param">
        <xsd:annotation>
            <xsd:documentation>
                Used to construct the test method parameters, the program is responsible for automatically loading the data onto them.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="data:ParamField" minOccurs="0" maxOccurs="unbounded"/>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="Source">
        <xsd:annotation>
            <xsd:documentation>
                Data sources that can be automatically verified. Currently, two data sources are supported:
                1. RMDB (SQL).
                2. MongoDB database.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="data:Init"/>
                <xsd:element ref="data:Verify"/>
            </xsd:sequence>
            <xsd:attribute name="Id" type="xsd:NMTOKEN" use="required">
                <xsd:annotation>
                    <xsd:documentation>
                        The Id of the data source should be bound to the specific javax.sql.DataSource or org.springframework.data.mongodb.core.MongoOperations
                        type attribute on the test object through the @ZestSource annotation
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="ParamField">
        <xsd:annotation>
            <xsd:documentation>
                The attribute value of the test parameter, the specific data type depends on the definition in the code.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:simpleContent>
                <xsd:extension base="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Assign values to specific test parameter attribute objects.
                            If the attribute type of the test parameter is basic type, Integer, Long, Boolean, Double, Float, String, then assign value directly.
                            If it is a Date type, it will determine whether to perform the assignment after conversion according to whether the CurrentTime property is set before.
                            In other cases, treat the content here as a JSON string and use it to construct the property object.
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:attribute name="Name" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation>
                                Field name of test parameter.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:simpleContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="Init">
        <xsd:annotation>
            <xsd:documentation>
                The initial state of the data source: the program will automatically use the following data to initialize the data source.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:annotation>
                    <xsd:documentation>
                        The data content in the data source is mutually exclusive. Which one to use must match the object bound by the @ZestSource annotation.
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:element ref="data:Table" minOccurs="0" maxOccurs="unbounded"/>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="Verify">
        <xsd:annotation>
            <xsd:documentation>
                The data source is to be verified after executing the code to be tested: the program will automatically verify the data source with the following data.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:annotation>
                    <xsd:documentation>
                        The data content in the data source is mutually exclusive. Which one to use must match the object bound by the @ZestSource annotation.
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:element ref="data:Table" minOccurs="0" maxOccurs="unbounded"/>
            </xsd:sequence>
            <xsd:attribute name="Ignore" type="xsd:boolean" default="false">
                <xsd:annotation>
                    <xsd:documentation>
                        If true, the result verification will be ignored after the code under test is executed.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="Table">
        <xsd:annotation>
            <xsd:documentation>
                May be a RMDB (SQL) table, or MongoDB Collection.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="data:Sorts" minOccurs="0">
                    <xsd:annotation>
                        <xsd:documentation><![CDATA[
                            Because the primary key of the table to be verified is not necessarily in order, you need to specify the collation of the query.
                            This attribute is only valid in the <Table> element under the <Verify> element.
                        ]]></xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element ref="data:Rules" minOccurs="0">
                    <xsd:annotation>
                        <xsd:documentation><![CDATA[
                            Specify data validation rules.
                            This attribute is only valid in the <Table> element under the <Verify> element.
                        ]]></xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element ref="data:Data" minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:attribute name="Name" type="xsd:string" use="required"/>
            <xsd:attribute name="EntityClass" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>
                        If MongoDB, here is the entity class nameã€‚
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="Ignore" type="xsd:boolean" default="false">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
                        If true, ignore the verification of this database table after the code under test is executed.
                        This attribute is only valid in the <Table> element under the <Verify> element.
                    ]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="Sorts">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="data:Sort" maxOccurs="unbounded"/>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="Sort">
        <xsd:annotation>
            <xsd:documentation>
                Sorting rules
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:attribute name="Field" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>
                        Sorted field
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="Direction" default="asc">
                <xsd:annotation>
                    <xsd:documentation>
                        Sorting direction
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="asc"/>
                        <xsd:enumeration value="desc"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="Data" type="xsd:string">
        <xsd:annotation>
            <xsd:documentation>
                It can be a table record in a RMDB (SQL), or a Document in MongoDB.
                It depends on the definition of the superior node. The specific value represented by the JSON content.
                If the content contains the Date type, it will determine whether to perform the assignment after conversion according to whether the CurrentTime property is set before.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="Rules">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="data:Rule" maxOccurs="unbounded"/>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="Rule">
        <xsd:annotation>
            <xsd:documentation>
                Rules for verification
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:choice>
                    <xsd:element ref="data:RegExp"/>
                    <xsd:element ref="data:CurrentTime"/>
                    <xsd:element ref="data:FromCurrentTime"/>
                    <xsd:element ref="data:Range"/>
                </xsd:choice>
            </xsd:sequence>
            <xsd:attribute name="Field" type="xsd:string" use="required">
                <xsd:annotation>
                    <xsd:documentation>
                        Data field name
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="Nullable" type="xsd:boolean" default="false">
                <xsd:annotation>
                    <xsd:documentation>
                        Whether to allow null values
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="RegExp" type="xsd:string">
        <xsd:annotation>
            <xsd:documentation>
                Verify with regular expressions
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="CurrentTime">
        <xsd:annotation>
            <xsd:documentation>
                Verify that it is the current time
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:attribute name="Offset" type="xsd:int" default="1000">
                <xsd:annotation>
                    <xsd:documentation>
                        How many milliseconds error may occur in time
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="FromCurrentTime">
        <xsd:annotation>
            <xsd:documentation>
                Verify whether it is a time range before (or after) the current time
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:attribute name="Min" type="xsd:int" use="required">
                <xsd:annotation>
                    <xsd:documentation>
                        The nearest value to the current time (can be negative)
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="Max" type="xsd:int" use="required">
                <xsd:annotation>
                    <xsd:documentation>
                        The farthest value from the current time (can be negative)
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="Unit" use="required">
                <xsd:annotation>
                    <xsd:documentation>
                        time unit
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="day"/>
                        <xsd:enumeration value="hour"/>
                        <xsd:enumeration value="minute"/>
                        <xsd:enumeration value="second"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="Offset" type="xsd:int" default="1000">
                <xsd:annotation>
                    <xsd:documentation>
                        How many milliseconds error may occur in time
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="Range">
        <xsd:annotation>
            <xsd:documentation>
                Verify within a range of values
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:attribute name="From" type="xsd:double">
                <xsd:annotation>
                    <xsd:documentation>
                        Start value of the numerical range
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="IncludeFrom" type="xsd:boolean" default="true">
                <xsd:annotation>
                    <xsd:documentation>
                        Whether to include the start value
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="To" type="xsd:double">
                <xsd:annotation>
                    <xsd:documentation>
                        The end value of the numerical range
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="IncludeTo" type="xsd:boolean" default="true">
                <xsd:annotation>
                    <xsd:documentation>
                        Whether to include the end value
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

</xsd:schema>
